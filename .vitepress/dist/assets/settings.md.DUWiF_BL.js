import{_ as a}from"./chunks/laravel-packages-settings.kKL4eJ3i.js";import{_ as o,c as r,a0 as s,o as i}from"./chunks/framework.oyq6xFFj.js";const e="/whisperer-for-laravel-docs/assets/project-type-standard-application.DHckj2mf.png",d="/whisperer-for-laravel-docs/assets/project-type-module.Bj2EWrCe.png",y=JSON.parse('{"title":"Settings","description":"","frontmatter":{},"headers":[],"relativePath":"settings.md","filePath":"settings.md"}'),n={name:"settings.md"};function l(c,t,p,h,u,g){return i(),r("div",null,t[0]||(t[0]=[s('<h1 id="settings" tabindex="-1">Settings <a class="header-anchor" href="#settings" aria-label="Permalink to &quot;Settings&quot;">​</a></h1><p>By default, the plugin checks for the presence of <code>laravel/framework</code> folder. Plugin features will only work if this package is found.</p><p><img src="'+e+'" alt="Settings Page"></p><p><img src="'+a+'" alt="Settings Laravel packages"></p><h2 id="general-settings" tabindex="-1">General settings <a class="header-anchor" href="#general-settings" aria-label="Permalink to &quot;General settings&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Setting</th><th>Description</th><th>Default Value</th></tr></thead><tbody><tr><td><strong>Laravel Directory</strong></td><td>The Laravel Directory option is useful when your Laravel installation is not in the project root</td><td><code>&quot;&quot;</code> (empty)</td></tr><tr><td><strong>Project Type</strong></td><td>Choose between &quot;Standard Application&quot; or &quot;Module Based Application&quot;.</td><td><code>Standard Application</code></td></tr><tr><td><strong>Modules Directory</strong></td><td>Path to the root directory for modules (visible for Module Based Applications).</td><td><code>Modules</code></td></tr><tr><td><strong>Module Source</strong></td><td>Specify the source directory for modules. Leave blank if the source is <code>app</code>.</td><td><code>app</code></td></tr></tbody></table><h2 id="laravel-packages-settings" tabindex="-1">Laravel packages settings <a class="header-anchor" href="#laravel-packages-settings" aria-label="Permalink to &quot;Laravel packages settings&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Setting</th><th>Description</th><th>Default Value</th></tr></thead><tbody><tr><td><strong>Inertia Page Component Paths</strong></td><td>Manage paths for Inertia components.</td><td><code>resources/js/Pages</code></td></tr></tbody></table><h2 id="project-types" tabindex="-1">Project types <a class="header-anchor" href="#project-types" aria-label="Permalink to &quot;Project types&quot;">​</a></h2><h3 id="standard-application" tabindex="-1">Standard Application <a class="header-anchor" href="#standard-application" aria-label="Permalink to &quot;Standard Application&quot;">​</a></h3><p><img src="'+e+'" alt="Settings Laravel packages"></p><p>Choose this option for a standard Laravel project structure. This is the default project type. This option assumes a single-directory structure without modular separation.</p><p>Components like routes, config files, and views are organized within their respective default Laravel directories.</p><h3 id="module-based-application" tabindex="-1">Module Based Application <a class="header-anchor" href="#module-based-application" aria-label="Permalink to &quot;Module Based Application&quot;">​</a></h3><p><img src="'+d+'" alt="Settings Laravel packages"></p><p>Select this option if your Laravel project is organized into a modular structure. This is ideal for large-scale applications where functionality is split into independent modules.</p><ul><li><strong>Root Directory:</strong> Specifies the main folder where all modules are stored. By default, this is set to <code>Modules</code>.</li><li><strong>Module Source:</strong> Defines the directory inside each module where source code (like Controllers, Models) is located. Leave blank to use the default app directory. By default, this is set to <code>app</code>.</li></ul>',17)]))}const b=o(n,[["render",l]]);export{y as __pageData,b as default};
